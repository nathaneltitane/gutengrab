#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
		rm -r -f "${HOME}"/.local/bin/frobulator
fi

if [[ -z $(command -v frobulator) ]]
then
		if [[ $(id -u -n) = "root" ]]
		then
				SUDO_HOME=/root

				USER="${SUDO_USER}"

				HOME=/home/"${USER}"
		fi

		if [[ -z $(command -v curl) ]]
		then
				yes | apt-get install curl
		fi

		if [ ! -d "${HOME}"/.local/bin ]
		then
				mkdir -p "${HOME}"/.local/bin
		fi

		curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

		chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

export self_arguments="${@}"

# frobulator.escalate

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="07-03-2025"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Welcome to the Gutendex teminal library!"

# variables ////////////////////////////////////////////////////////////////////

api_url="https://gutendex.com/books"

# functions ////////////////////////////////////////////////////////////////////

languages_list () {

	echo

	frobulator.fwd "Listing known languages${marker_elp}"
	echo

	frobulator.timeout

	IFS=$'\n'

	# get all language names as an indexed array

	languages_keys=("${!languages_list[@]}")
	languages_count=${#languages_keys[@]}

	# find longest langauge string

	language_length=0

	for language_string in "${languages_keys[@]}"
	do
		if [[ ${#language_string} -gt ${language_length} ]]
		then
			language_length=${#language_string}
		fi
	done

	# calculate half of the array length and round up

	half=$(( (languages_count + 1) / 2 ))

	for (( i=0 ; i<half ; i++ ))
	do
		language_column_a="${languages_keys[i]}"

		# avoid out-of-bounds error

		language_column_b="${languages_keys[i+half]:-}"

		printf "%-*s %-4s    |    %-*s %-4s\n"														\
		"$((language_length + 4))" "$language_column_a" "${languages_list[$language_column_a]}"		\
		"$((language_length + 4))" "$language_column_b" "${languages_list[$language_column_b]}"
	done

	echo

	IFS=''

	unset language
	}

selections () {

	frobulator.sep
	echo

	frobulator.inf "Selections"
	echo

	echo "    [ 1 ] [S]earch for a book           [ author | title | subject ]"
	echo "    [ 2 ] [G]et book details            [ id ]"
	echo "    [ 3 ] [D]ownload book(s) (epub)     [ id ]"
	echo
	echo "    [ 4 ] [E]xit"
	echo

	frobulator.sep
	echo

	frobulator.ipt "Selection:"

	frobulator.read selection

	echo
}

string_sanitize () {

	string="${1}"

	echo "${string}" | tr -d '"|/\:;,!?*<>{}_' | sed 's/  */ /g' | sed 's/^ *//;s/ *$//'
}

book_query () {

	frobulator.ipt "Enter search query [ author / title / subject ]:"

	frobulator.read query

	while [[ ! "${query}" =~ ^[A-Za-z0-9]+$ ]]
	do
		echo
		frobulator.err "Invalid input type:"
		echo

		frobulator.wrn "Alphanumeric characters only"
		echo

		frobulator.ipt "Enter search query [ author / title / subject ]:"

		frobulator.read query

	done

	echo

	# url encode space characters

	query=$(echo "${query}" | sed 's/ /%20/g')

	declare -A languages_list=(
		["Abkhazian"]="ab"
		["Afar"]="aa"
		["Afrikaans"]="af"
		["Akan"]="ak"
		["Albanian"]="sq"
		["Amharic"]="am"
		["Arabic"]="ar"
		["Aragonese"]="an"
		["Armenian"]="hy"
		["Assamese"]="as"
		["Avaric"]="av"
		["Avestan"]="ae"
		["Aymara"]="ay"
		["Azerbaijani"]="az"
		["Bambara"]="bm"
		["Bashkir"]="ba"
		["Basque"]="eu"
		["Belarusian"]="be"
		["Bengali"]="bn"
		["Bislama"]="bi"
		["Bosnian"]="bs"
		["Breton"]="br"
		["Bulgarian"]="bg"
		["Burmese"]="my"
		["Catalan"]="ca"
		["Chamorro"]="ch"
		["Chechen"]="ce"
		["Chichewa"]="ny"
		["Chinese"]="zh"
		["Church Slavonic"]="cu"
		["Chuvash"]="cv"
		["Cornish"]="kw"
		["Corsican"]="co"
		["Cree"]="cr"
		["Croatian"]="hr"
		["Czech"]="cs"
		["Danish"]="da"
		["Divehi"]="dv"
		["Dutch"]="nl"
		["Dzongkha"]="dz"
		["English"]="en"
		["Esperanto"]="eo"
		["Estonian"]="et"
		["Ewe"]="ee"
		["Faroese"]="fo"
		["Fijian"]="fj"
		["Finnish"]="fi"
		["French"]="fr"
		["Fulah"]="ff"
		["Gaelic, Scottish"]="gd"
		["Galician"]="gl"
		["Ganda"]="lg"
		["Georgian"]="ka"
		["German"]="de"
		["Greek"]="el"
		["Greenlandic"]="kl"
		["Guarani"]="gn"
		["Gujarati"]="gu"
		["Haitian Creole"]="ht"
		["Hausa"]="ha"
		["Hebrew"]="he"
		["Herero"]="hz"
		["Hindi"]="hi"
		["Hiri Motu"]="ho"
		["Hungarian"]="hu"
		["Icelandic"]="is"
		["Ido"]="io"
		["Igbo"]="ig"
		["Indonesian"]="id"
		["Interlingua"]="ia"
		["Interlingue"]="ie"
		["Inuktitut"]="iu"
		["Inupiaq"]="ik"
		["Irish"]="ga"
		["Italian"]="it"
		["Japanese"]="ja"
		["Javanese"]="jv"
		["Kannada"]="kn"
		["Kanuri"]="kr"
		["Kashmiri"]="ks"
		["Kazakh"]="kk"
		["Khmer"]="km"
		["Kikuyu"]="ki"
		["Kinyarwanda"]="rw"
		["Komi"]="kv"
		["Kongo"]="kg"
		["Korean"]="ko"
		["Kurdish"]="ku"
		["Kwanyama"]="kj"
		["Kyrgyz"]="ky"
		["Lao"]="lo"
		["Latin"]="la"
		["Latvian"]="lv"
		["Limburgish"]="li"
		["Lingala"]="ln"
		["Lithuanian"]="lt"
		["Luba-Katanga"]="lu"
		["Luxembourgish"]="lb"
		["Macedonian"]="mk"
		["Malagasy"]="mg"
		["Malay"]="ms"
		["Malayalam"]="ml"
		["Maltese"]="mt"
		["Manx"]="gv"
		["Maori"]="mi"
		["Marathi"]="mr"
		["Marshallese"]="mh"
		["Mongolian"]="mn"
		["Nauru"]="na"
		["Navajo"]="nv"
		["Ndonga"]="ng"
		["Nepali"]="ne"
		["North Ndebele"]="nd"
		["Northern Sami"]="se"
		["Norwegian Bokmål"]="nb"
		["Norwegian Nynorsk"]="nn"
		["Norwegian"]="no"
		["Occitan"]="oc"
		["Ojibwa"]="oj"
		["Oriya"]="or"
		["Oromo"]="om"
		["Ossetian"]="os"
		["Pali"]="pi"
		["Pashto"]="ps"
		["Persian"]="fa"
		["Polish"]="pl"
		["Portuguese"]="pt"
		["Punjabi"]="pa"
		["Quechua"]="qu"
		["Romanian"]="ro"
		["Romansh"]="rm"
		["Rundi"]="rn"
		["Russian"]="ru"
		["Samoan"]="sm"
		["Sango"]="sg"
		["Sanskrit"]="sa"
		["Sardinian"]="sc"
		["Serbian"]="sr"
		["Shona"]="sn"
		["Sindhi"]="sd"
		["Sinhala"]="si"
		["Slovak"]="sk"
		["Slovenian"]="sl"
		["Somali"]="so"
		["South Ndebele"]="nr"
		["Southern Sotho"]="st"
		["Spanish"]="es"
		["Sundanese"]="su"
		["Swahili"]="sw"
		["Swati"]="ss"
		["Swedish"]="sv"
		["Tagalog"]="tl"
		["Tahitian"]="ty"
		["Tajik"]="tg"
		["Tamil"]="ta"
		["Tatar"]="tt"
		["Telugu"]="te"
		["Thai"]="th"
		["Tibetan"]="bo"
		["Tigrinya"]="ti"
		["Tonga"]="to"
		["Tsonga"]="ts"
		["Tswana"]="tn"
		["Turkish"]="tr"
		["Turkmen"]="tk"
		["Twi"]="tw"
		["Uighur"]="ug"
		["Ukrainian"]="uk"
		["Urdu"]="ur"
		["Uzbek"]="uz"
		["Venda"]="ve"
		["Vietnamese"]="vi"
		["Volapük"]="vo"
		["Walloon"]="wa"
		["Welsh"]="cy"
		["Western Frisian"]="fy"
		["Wolof"]="wo"
		["Xhosa"]="xh"
		["Yi"]="ii"
		["Yiddish"]="yi"
		["Yoruba"]="yo"
		["Zhuang"]="za"
		["Zulu"]="zu"
	)

	frobulator.ipt "Enter language - [ ↵ ] to skip [ en / fr / es / .. ]:"

	frobulator.read language

	while true
	do
		if [[ -z "${language}" ]]
		then
			break
		fi

		if [[ "${language}" =~ ^[A-Za-z]+$ ]]
		then
			break
		fi

		if [[ "${language}" =~ ^[0-90-9]+$ ]]
		then
		    frobulator.err "Invalid input type:"
			echo

			frobulator.wrn "Alphabetical characters only"
			echo
		fi

		languages_list

		frobulator.ipt "Enter language - [ ↵ ] to skip [ en / fr / es / .. ]:"

		frobulator.read language

	done

	echo

	if [ -n "${language}" ]
	then
		api_call="${api_url}/?search=${query}&languages=${language}"
	else
		api_call="${api_url}/?search=${query}"
	fi

	results=$(curl -s "${api_call}") &

	frobulator.process "Querying"

	if [ -n "${language}" ]
	then
		search_results_last=(
			$(echo "${results}" | jq -r '.results[].id | select(.languages[] | contains("'"${language}"'"))')
		)

	else
		search_results_last=(
			$(echo "${results}" | jq -r '.results[].id')
		)

	fi

	count=$(curl -s "${api_call}" | jq -r '.count')

	if [ "${count}" -eq 0 ]
	then
		frobulator.err "Matches" "[ ${count} ]"
		echo
	else
		frobulator.scs "Matches" "[ ${count} ]"
		echo

		frobulator.sep
		echo

		curl -s "${api_call}" | jq -r '
				.results[] |
				select(.languages[] |
				contains("'"${language}"'")) |
				"Identifier:"
				+ " "
				+ (.id|tostring)
				+ "\n"
				+ "\n"
				+ "    "
				+ "Title:"
				+ "   "
				+ "    "
				+ .title
				+ "\n"
				+ "    "
				+ "Author:"
				+ "  "
				+ "    "
				+ (.authors[].name // "N/A")
				+ "\n"
				+ "    "
				+ "Language:"
				+ "    "
				+ (.languages | join(", "))
				+ "\n"
				+ "    "
				+ "Download:"
				+ "    "
				+ (.formats."application/epub+zip" // "N/A")
				+ "\n"
		'
	fi
}

book_details () {

	frobulator.ipt "Enter book identifier:"

	frobulator.read book_identifier

	while [[ ! "${book_identifier}" =~ ^[0-9]+$ ]]
	do
		echo
		frobulator.err "Invalid input type:"
		echo

		frobulator.wrn "Numeric characters only"
		echo

		frobulator.ipt "Enter book identifier:"

		frobulator.read book_identifier

	done

	echo

	frobulator.sep
	echo

	formats=$(curl -s "${api_url}/${book_identifier}/" | jq -r '
				.formats | to_entries[] |
				"    - "
				+ (.key | sub("^application/"; ""))
				+ ":"
				+ "\n"
				+ "      [ " + .value + " ]"
				+ "\n"
			'
		)

	curl -s "${api_url}/${book_identifier}/" | jq -r '
					"\n"
					+ "\n"
					+ "Title:"
					+ "\n"
					+ "\n"
					+ .title
					+ "\n"
					+ "\n"
					+ "Author:"
					+ "\n"
					+ "\n"
					+ (.authors[].name // "Unknown")
					+ "\n"
					+ "\n"
					+ "Subjects:"
					+ "\n"
					+ "\n"
					+ "    - "
					+ (.subjects | join("\n    - "))
					+ "\n"
					+ "\n"
					+ "Formats:"
					+ "\n"
	' | fold -s -w 80 &

	frobulator.process "Fetching details"

	echo "${formats}"

	echo

}

book_download () {

	frobulator.ipt "Enter Book identifier(s) separated by spaces - Type 'all' to download last query results:"
	echo

	frobulator.read -a book_identifiers

	if [ "${book_identifiers[0]}" = "all" ]
	then
		if [ ${#search_results_last[@]} -eq 0 ]
		then
			frobulator.err "No previous search results stored or found."
			echo

			return
		fi

		book_identifiers=("${search_results_last[@]}")
	fi

	for book_identifier in "${book_identifiers[@]}"
	do
		frobulator.inf "Fetching book information" " [ ${book_identifier} ]"
		echo

		response=$(curl -s "${api_url}/${book_identifier}/") &

		frobulator.process "Fetching book information" " [ ${book_identifier} ]"
		echo

		epub_url=$(echo "${response}" | jq -r '.formats."application/epub+zip"')

		title=$(echo "${response}" | jq -r '.title')
		author=$(echo "${response}" | jq -r '.authors[0].name')

		if [ "${epub_url}" = "null" ]
		then
			frobulator.err "No EPUB version available for book" "[ ${book_identifier} ]"
			echo

			continue
		fi

		author=$(string_sanitize "${author}")
		title=$(string_sanitize  "${title}")

		extension="epub"

		file="${author} - ${title}.${extension}"

		curl -s -L -o "${file}" "${epub_url}" &

		frobulator.progress "Downloading" "[ ${file} ]"
		echo

		frobulator.inf "Download complete" "[ ${file} ]"
		echo
	done
}


while true
do
	selections

	case "${selection}"
	in
		1 | s | S )

			book_query

		;;

		2 | g | G )

			book_details
		;;

		3 | d | D )

			book_download
		;;

		4 | e | E )

			exit
		;;

		*)
			echo "Invalid choice. Try again."
		;;

	esac
done

